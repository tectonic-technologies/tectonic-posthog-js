{"version":3,"file":"web-experiments.test.js","sourceRoot":"","sources":["../../src/web-experiments.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebExperiments } from './web-experiments'\nimport { PostHog } from './posthog-core'\nimport { DecideResponse, PostHogConfig } from './types'\nimport { PostHogPersistence } from './posthog-persistence'\nimport { WebExperiment } from './web-experiments-types'\nimport { RequestRouter } from './utils/request-router'\nimport { ConsentManager } from './consent'\n\ndescribe('Web Experimentation', () => {\n    let webExperiment: WebExperiments\n    let posthog: PostHog\n    let persistence: PostHogPersistence\n    let experimentsResponse: { status?: number; experiments?: WebExperiment[] }\n    const signupButtonWebExperimentWithFeatureFlag = {\n        id: 3,\n        name: 'Signup button test',\n        feature_flag_key: 'signup-button-test',\n        variants: {\n            Signup: {\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Sign me up',\n                        html: 'Sign me up',\n                    },\n                ],\n            },\n            'Send-it': {\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Send it',\n                        html: 'Send it',\n                    },\n                ],\n            },\n            'css-transform': {\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        className: 'primary',\n                    },\n                ],\n            },\n            'innerhtml-transform': {\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        html: '<h1>hello world</h1>',\n                    },\n                ],\n            },\n            control: {\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Sign up',\n                        html: 'Sign up',\n                    },\n                ],\n            },\n        },\n    } as unknown as WebExperiment\n\n    const buttonWebExperimentWithUrlConditions = {\n        id: 3,\n        name: 'Signup button test',\n        variants: {\n            Signup: {\n                conditions: {\n                    url: 'https://example.com/Signup',\n                    urlMatchType: 'exact',\n                },\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Sign me up',\n                        html: 'Sign me up',\n                    },\n                ],\n            },\n            'Send-it': {\n                conditions: { url: 'regex-url', urlMatchType: 'regex' },\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Send it',\n                        html: 'Send it',\n                    },\n                ],\n            },\n            control: {\n                conditions: { url: 'checkout', urlMatchType: 'icontains' },\n                transforms: [\n                    {\n                        selector: '#set-user-properties',\n                        text: 'Sign up',\n                        html: 'Sign up',\n                    },\n                ],\n            },\n        },\n    } as unknown as WebExperiment\n\n    beforeEach(() => {\n        persistence = { props: {}, register: jest.fn() } as unknown as PostHogPersistence\n        posthog = makePostHog({\n            config: {\n                disable_web_experiments: false,\n                api_host: 'https://test.com',\n                token: 'testtoken',\n                autocapture: true,\n                region: 'us-east-1',\n            } as unknown as PostHogConfig,\n            persistence: persistence,\n            get_property: jest.fn(),\n            _send_request: jest\n                .fn()\n                .mockImplementation(({ callback }) => callback({ statusCode: 200, json: experimentsResponse })),\n            consent: { isOptedOut: () => true } as unknown as ConsentManager,\n        })\n\n        posthog.requestRouter = new RequestRouter(posthog)\n        webExperiment = new WebExperiments(posthog)\n    })\n\n    function createTestDocument() {\n        // eslint-disable-next-line no-restricted-globals\n        const elTarget = document.createElement('img')\n        elTarget.id = 'primary_button'\n        // eslint-disable-next-line no-restricted-globals\n        const elParent = document.createElement('span')\n        elParent.innerText = 'unassigned'\n        elParent.className = 'unassigned'\n        elParent.appendChild(elTarget)\n        // eslint-disable-next-line no-restricted-globals\n        document.querySelectorAll = function () {\n            return [elParent] as unknown as NodeListOf<Element>\n        }\n\n        return elParent\n    }\n\n    function testUrlMatch(testLocation: string, expectedText: string) {\n        experimentsResponse = {\n            experiments: [buttonWebExperimentWithUrlConditions],\n        }\n        const webExperiment = new WebExperiments(posthog)\n        const elParent = createTestDocument()\n\n        WebExperiments.getWindowLocation = () => {\n            // eslint-disable-next-line compat/compat\n            return new URL(testLocation) as unknown as Location\n        }\n\n        webExperiment.getWebExperimentsAndEvaluateDisplayLogic(false)\n        expect(elParent.innerText).toEqual(expectedText)\n    }\n\n    function assertElementChanged(variant: string, expectedProperty: string, value: string) {\n        const elParent = createTestDocument()\n        webExperiment = new WebExperiments(posthog)\n        webExperiment.afterDecideResponse({\n            featureFlags: {\n                'signup-button-test': variant,\n            },\n        } as unknown as DecideResponse)\n\n        switch (expectedProperty) {\n            case 'className':\n                expect(elParent.className).toEqual(value)\n                break\n\n            case 'innerText':\n                expect(elParent.innerText).toEqual(value)\n                break\n\n            case 'innerHTML':\n                expect(elParent.innerHTML).toEqual(value)\n                break\n        }\n    }\n\n    describe('url match conditions', () => {\n        it('exact location match', () => {\n            const testLocation = 'https://example.com/Signup'\n            const expectedText = 'Sign me up'\n            testUrlMatch(testLocation, expectedText)\n        })\n\n        it('regex location match', () => {\n            const testLocation = 'https://regex-url.com/test'\n            const expectedText = 'Send it'\n            testUrlMatch(testLocation, expectedText)\n        })\n\n        it('icontains location match', () => {\n            const testLocation = 'https://example.com/checkout'\n            const expectedText = 'Sign up'\n            testUrlMatch(testLocation, expectedText)\n        })\n    })\n\n    describe('utm match conditions', () => {\n        it('can disqualify on utm terms', () => {\n            const buttonWebExperimentWithUTMConditions = buttonWebExperimentWithUrlConditions\n            buttonWebExperimentWithUTMConditions.variants['Signup'].conditions = {\n                utm: {\n                    utm_campaign: 'marketing',\n                    utm_medium: 'desktop',\n                },\n            }\n            const testLocation = 'https://example.com/landing-page?utm_campaign=marketing&utm_medium=mobile'\n            const expectedText = 'unassigned'\n            testUrlMatch(testLocation, expectedText)\n        })\n    })\n\n    describe('with feature flags', () => {\n        it('experiments are disabled by default', async () => {\n            const expResponse = {\n                experiments: [signupButtonWebExperimentWithFeatureFlag],\n            }\n            const disabledPostHog = makePostHog({\n                config: {\n                    api_host: 'https://test.com',\n                    token: 'testtoken',\n                    autocapture: true,\n                    region: 'us-east-1',\n                } as unknown as PostHogConfig,\n                persistence: persistence,\n                get_property: jest.fn(),\n                _send_request: jest\n                    .fn()\n                    .mockImplementation(({ callback }) => callback({ statusCode: 200, json: expResponse })),\n                consent: { isOptedOut: () => true } as unknown as ConsentManager,\n            })\n\n            posthog.requestRouter = new RequestRouter(disabledPostHog)\n            webExperiment = new WebExperiments(disabledPostHog)\n            assertElementChanged('control', 'innerText', 'unassigned')\n        })\n\n        it('can set text of Span Element', async () => {\n            experimentsResponse = {\n                experiments: [signupButtonWebExperimentWithFeatureFlag],\n            }\n\n            assertElementChanged('control', 'innerText', 'Sign up')\n        })\n\n        it('can set className of Span Element', async () => {\n            experimentsResponse = {\n                experiments: [signupButtonWebExperimentWithFeatureFlag],\n            }\n\n            assertElementChanged('css-transform', 'className', 'primary')\n        })\n\n        it('can set innerHtml of Span Element', async () => {\n            experimentsResponse = {\n                experiments: [signupButtonWebExperimentWithFeatureFlag],\n            }\n            assertElementChanged('innerhtml-transform', 'innerHTML', '<h1>hello world</h1>')\n        })\n    })\n\n    function makePostHog(ph: Partial<PostHog>): PostHog {\n        return {\n            get_distinct_id() {\n                return 'distinctid'\n            },\n            ...ph,\n        } as unknown as PostHog\n    }\n})\n"]}